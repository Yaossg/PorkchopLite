import "../lib/stdlib.pc"

fn plus(lhs: *none, rhs: *none) = (lhs as int + rhs as int) as *none
fn deref(ptr: *none) = (*(ptr as *int)) as *none

fn range_sum(raw: *none, offset: int, length: int) = {
	let sum = 0
	let data = raw as *int
	let i = 0
	while i < length {
		sum += data[offset + i]
		++i
	}
	sum as *none
}

fn main() = {
	let n = 100000000
	let a = alloc(sizeof(int) * n) as *int
	let i = 0
	while i < n {
		a[i] = i + 1
		i += 1
	}
	i = 0
	let time1 = -pc_time()
	let sum1 = 0
	while i < n {
		sum1 += a[i]
		i += 1
	}
	time1 += pc_time()
	printint(sum1)
	printfloat(time1 * 1000.0)

	let time2 = -pc_time()
	let sum2 = parallel_reduce(a as *none, sizeof(int), n, deref, plus) as int
	time2 += pc_time()
	printint(sum2)
	printfloat(time2 * 1000.0)

	let time3 = -pc_time()
	let sums = parallel_for(a as *none, n, range_sum) as *int
	let sum3 = 0
	i = 0
	while i < sums[-1] {
		sum3 += sums[i]
		++i
	}
	time3 += pc_time()
	printint(sum3)
	printfloat(time3 * 1000.0)

	dealloc((sums - 1) as *none)
	dealloc(a as *none)
}
